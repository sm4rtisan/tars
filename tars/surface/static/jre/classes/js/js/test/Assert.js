$import("js.test.AssertionError","BootstrapClassLoader"),$import("js.lang.StringBuffer","BootstrapClassLoader"),$import("js.test.AssertionError","BootstrapClassLoader"),Class.forName({name:"public class js.test.Assert","protected Assert":function(){},"static public void fail":function(t){throw new js.test.AssertionError(t)},"static public void assertTrue":function(t,s){s||js.test.Assert.fail(t)},"static public void assertFalse":function(t,s){js.test.Assert.assertTrue(t,!s)},"static public void assertEquals":function(t,s,e){if((!Object.isNull(s)||!Object.isNull(e))&&(Object.isNull(s)||!s.equals(e))){var a=new js.lang.StringBuffer;Object.isNull(null)||t.equals("")||a.append(t).append(" "),a.append("expected:<"),a.append(Object.isNull(s)?"null":s.toString()),a.append("> but was:<"),a.append(Object.isNull(e)?"null":e.toString()),a.append(">"),js.test.Assert.fail(a.toString())}},"static public void assertNotEquals":function(t,s,e){if(Object.isNull(s)){if(!Object.isNull(s))return}else if(!s.equals(e))return;var a=new js.lang.StringBuffer;a.append("Values should be different. "),Object.isNull(t)||a.append(t).append(". "),a.append("Actual: ").append(e),js.test.Assert.fail(a.toString())},"static public void assertNotNull":function(t,s){js.test.Assert.assertTrue(t,!Object.isNull(s))},"static public void assertNull":function(t,s){if(!Object.isNull(s)){var e=new js.lang.StringBuffer;Object.isNull(t)||e.append(t).append(" "),e.append("expected null, but was:<").append(actual).append(">"),js.test.Assert.fail(e.toString())}},"static public void assertSame":function(t,s,e){if(s!=e){var a=new js.lang.StringBuffer;Object.isNull(t)||a.append(t).append(" "),a.append("expected same:<").append(s).append("> was not:<").append(e).append(">"),js.test.Assert.fail(a.toString())}},"static public void assertNotSame":function(t,s,e){if(s===e){var a=new js.lang.StringBuffer;Object.isNull(t)||a.append(t).append(" "),a.append("expected not same"),js.test.Assert.fail(a.toString())}},"public static <T> void assertThat":function(t,s){}});